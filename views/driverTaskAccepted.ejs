<!-- <%- include("partials/header") -%> -->


<!DOCTYPE html>
<html>
  <head>
    <title>Directions Service</title>

    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
<style>
    /**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
/* 
 * Always set the map height explicitly to define the size of the div element
 * that contains the map. 
 */
#map {
  height: 100%;
}

/* 
 * Optional: Makes the sample page fill the window. 
 */
html,
body {
  height: 100%;
  margin: 0;
  padding: 0;
}




</style>
    <!-- <link rel="stylesheet" type="text/css" href="./style.css" /> -->
    <!-- <script type="module" src="./index.ts"></script> -->
  </head>

  <body>
    <body data-sidebar="dark">

        <!-- <body data-layout="horizontal" data-topbar="colored"> -->
    
    
    
            <!-- ============================================================== -->
            <!-- Start right Content here -->
            <!-- ============================================================== -->
            <div class="">
                <div class="page-content">
                    <div class="container-fluid">
    
                        <!-- start page title -->
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="page-title-box">
                                    <h4>Driver dashboard</h4>
                                    <ol class="breadcrumb m-0">
                                        <li class="breadcrumb-item"><a href="javascript: void(0);">Current Task</a></li>
                                    </ol>
                                </div>
                            </div>
                            <!-- <div class="col-sm-6">
                                <div class="state-information d-none d-sm-block">
                                    <div class="state-graph">
                                        <div id="header-chart-1" data-colors='["--bs-primary"]'></div>
                                        <div class="info">Balance $ 2,317</div>
                                    </div>
                                    <div class="state-graph">
                                        <div id="header-chart-2" data-colors='["--bs-info"]'></div>
                                        <div class="info">Item Sold 1230</div>
                                    </div>
                                </div>
                            </div> -->
                        </div>
    
                    </div>
                </div>
                <div class="col-lg-12">

<div>
    <div class="col-lg-10 m-5">
    
 <div class="row">
  <p id="crd"> <%= empCords %>  </p>
  <div class="col-lg-6">
    <div class="col-lg-10"><h6>Drop:  </h6> <span id="drop"><%= currentTask.drop %></span></div>
    <div class="col-lg-10"><h6 >Pick up: </h6> <span id="pick"><%= currentTask.pickup %></span></div> 
    <h6 >Distance:</h6> <span id="total"></span> 
    
    <form role="form" action="/start" method="post">
      <input style="display: none;" type="text" name="tripStatus" value="On-going" >
      <input type="text" name="tripId" style="display: none;" value=" <%= currentTask.id %> " >
      <input style="display: none;" type="text" id="distance" name="distance"  >
      <h6 id="socketID">  </h6>  
      <button type="submit" class="btn btn-success">Start</button>
    </form>
    <a type="button" class="btn btn-primary" target="_blank" href="https://www.google.com/maps/dir/Current+Location/<%= currentTask.drop %>"   >Open on google maps</a>
  


  <form role="form" action="/end" method="post">
    <input style="display: none;" type="text" name="tripStatus" value="On-going" >
    <input type="text" name="tripId" style="display: none;" value=" <%= currentTask.id %> " >
    <h6 id="socketID">  </h6>  
    <button type="submit" class="btn btn-danger">End</button>
  </form>
</div>
  <div  class="col-lg-6 ">
    <div id="map"></div>
  </div>
</div>


       
    </div>

  </div>   


                </div>
            </div>
    
    

    

 
    <script
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDSX3jhBJVmlod62B-joxdetnWt-_yBnLM&callback=initMap&v=weekly"
      defer
    ></script>

    <script>
      const empCords = document.getElementById("crd").innerHTML.trim(); 
      const objects = empCords.split(',');
const array = [];

for (const object of objects) {
  const jsonObject = JSON.parse(object);
  array.push(jsonObject);
}
const codsArr = [];
for (let i = 0; i < (array.length); i++) {
console.log(  array[i]);

  const cvvc = {
    "location": array[i] + " " + array[i+1],
    "stopover": true
  }
  codsArr.push(cvvc);
  i = i+1;
}

console.log( codsArr[codsArr.length-1].location);


</script>   


    <script>
   function wait(ms){
    var start = new Date().getTime();
    var end = start;
    while(end < start + ms) {
      end = new Date().getTime();
   }
 }
   let map, infoWindow;
   const og = [];

   navigator.geolocation.getCurrentPosition(
        (position) => {
          const pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };
          const vvv = pos.lat + "," + pos.lng;
          og.push(vvv);
          console.log(vvv);
          console.log("[][][][][][]");
      
          console.log( pos.lat);
          console.log(pos.lng  );
          return vvv;
        },
 
      );
         console.log('before');
  wait(6000);  
  console.log('after');
console.log(og);
console.log("*98989898(*(*(*())))");


   window.onload =  function(){

 

    // Try HTML5 geolocation.
     
//     const origin = navigator.geolocation.getCurrentPosition(
//         (position) => {
//           const pos = {
//             lat: position.coords.latitude,
//             lng: position.coords.longitude,
//           };
//           const vvv = pos.lat + "," + pos.lng;
//           console.log(vvv);
//           console.log("[][][][][][]");
//           // origin.push(vvv);
//           console.log( pos.lat);
//           console.log(pos.lng  );
//           return vvv;
//         },
 
//       );
// console.log(origin);
// console.log("*98989898(*(*(*())))");
      const liveCordinates= [];

 
      setInterval(() => {
        navigator.geolocation.getCurrentPosition(
        (position) => {
          const pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };
          
          // console.log( pos.lat);
          //   console.log(pos.lng  );
            liveCordinates.push(pos);
            console.log(liveCordinates);
            socket.emit("gg", {lat: pos.lat, lng: pos.lng},liveCordinates)
        },
 
      );
      }, 2000);
    
};



//   ROAD MAP

function name() {
   const z = currentTask.pickup;
alert(z);
console.log(z + "5"); 
}

name();

function initMap() {
 

  const map = new google.maps.Map(document.getElementById("map"), {
    zoom: 6,
    center: { lat: 13.766295, lng: 77.288122},
  });
  
  const directionsService = new google.maps.DirectionsService();
  const directionsRenderer = new google.maps.DirectionsRenderer({
    draggable: true,
    map,
    panel: document.getElementById("panel"),
  });

  directionsRenderer.addListener("directions_changed", () => {
    const directions = directionsRenderer.getDirections();

    if (directions) {
      computeTotalDistance(directions);
    }
  });



  directionsRenderer.setMap(map);
  // console.log('before');
  // wait(6000);  
  // console.log('after');
  calculateAndDisplayRoute(directionsService, directionsRenderer);
}





function calculateAndDisplayRoute(directionsService, directionsRenderer) {
 



  // const waypts = vt;
  // const checkboxArray = document.getElementById("waypoints");

  // for (let i = 0; i < checkboxArray.length; i++) {
  //   if (checkboxArray.options[i].selected) {
  //     waypts.push({
  //       location: checkboxArray[i].value,
  //       stopover: true,
  //     });
  //   }
  // }

 
  console.log(og[0]);
  console.log("/////////////////////////");

  directionsService
    .route({
      origin: og[0],
      destination: codsArr[codsArr.length-1].location,
      waypoints:codsArr,
      //  [
      //   {"location":"12.8898017,77.6397277","stopover":true},
      //   {"location":"12.977445,77.5722554","stopover":true},
      //   {"location":"13.049016,77.5935633","stopover":true},
      //   {"location":"15.435329, 77.094781","stopover":true} 
      //  ], 
      optimizeWaypoints: true,
      travelMode: google.maps.TravelMode.DRIVING,
    })
    .then((response) => {
      directionsRenderer.setDirections(response);

      const route = response.routes[0];
      // const summaryPanel = document.getElementById("directions-panel");

      // summaryPanel.innerHTML = "";

      // // For each route, display summary information.
      // for (let i = 0; i < route.legs.length; i++) {
      //   const routeSegment = i + 1;

      //   summaryPanel.innerHTML +=
      //     "<b>Route Segment: " + routeSegment + "</b><br>";
      //   summaryPanel.innerHTML += route.legs[i].start_address + " to ";
      //   summaryPanel.innerHTML += route.legs[i].end_address + "<br>";
      //   summaryPanel.innerHTML += route.legs[i].distance.text + "<br><br>";
      // }
    })
    .catch((e) => window.alert("Directions request failed due to " + e));
}


function computeTotalDistance(result) {
  let total = 0;
  const myroute = result.routes[0];

  if (!myroute) {
    return;
  }

  for (let i = 0; i < myroute.legs.length; i++) {
    total += myroute.legs[i].distance.value;
  }

  total = total / 1000;
  document.getElementById("total").innerHTML = total + " km";
  document.getElementById("distance").value = total ;
}

// window.initMap = initMap;

  
document.getElementById("socketID").innerHTML = socket.id;


    </script>
    <script src="/socket.io/socket.io.js"></script>

<script>
      var socket = io();
      socket.emit('connection', function(){
         console.log(JSON.stringify(socket.io.engine.id) + "//??//");
var id = socket.io.engine.id;
alert(id);
})
   
</script>
    </body>
<%- include("partials/footer") -%>



