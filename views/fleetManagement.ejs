<%- include("partials/header") -%>

<style>
  


#infowindow-content .title {
  font-weight: bold;
}

#infowindow-content {
  display: none;
}

#map #infowindow-content {
  display: inline;
}










#title {
  color: #fff;
  background-color: #4d90fe;
  font-size: 25px;
  font-weight: 500;
  padding: 6px 12px;
}


</style>

<body data-sidebar="dark">

    <!-- <body data-layout="horizontal" data-topbar="colored"> -->
        <%- include("partials/menuAndNav") -%>


        <!-- ============================================================== -->
        <!-- Start right Content here -->
        <!-- ============================================================== -->
        <div class="main-content">
            <div class="page-content">
                <div class="container-fluid">

                    <!-- start page title -->
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="page-title-box">
                                <h4>Admin dashboard</h4>
                                <ol class="breadcrumb m-0">
                                    <li class="breadcrumb-item"><a href="javascript: void(0);">Task Assigning page</a></li>
                                </ol>
                            </div>
                        </div>

                    </div>

                </div>
            </div>
            <div class="col-lg-12 m-3">
              <div class="col-lg-10 card-body">


    
  <h6>Driver name</h6>  <span> <%= reqDriver.name %> </span>
  
  <br>

  <br>

<div class="col-lg-12" >
<div class="row">
    <div class="col-lg-3">  <h6>Driver email</h6><p><%= reqDriver.email %></p></div>
    <div class="col-lg-3">  <h6>Driver phone num</h6><%= reqDriver.phoneno %></p></div>

<div class="col-lg-6"> <h6>Driver Vehicle type</h6><p><%= reqDriver.VehDetails[0].vehType %></p></div>
</div>

</div>
<br>
  

  <div>
<form action="/addEmpToFleet" method="post">
  <input type="text" style="display: none;" name="presenrDriverID" value=<%= reqDriver.driverID %> >
  <input type="text" name="presenrDriverName" style="display: none;" value=<%= reqDriver.name %> >
  <input type="text" name="presenrDriverVehType" style="display: none;" value=<%= reqDriver.VehDetails[0].vehType %> >    
  <button type="submit">
        Add employees
      </button>
</form>
  </div>


              </div>
              <div class="col-lg- card-body">
                <form  action="/addDriverTask" method="post">
             <div class="form-group">
            <div class="row">
                <div class="col-lg-3">
                    <label for="pickUp"> Add pick up address: </label>
                    <input id="pac-input" class="input-group-text form-control" type="text" name="pickUp" placeholder="Pick Up"></div>
                    <br>
                    <div class="col-lg-3">  
                      <label for="drop"> Add drop address: </label>
                    <input id="pac-input1" class="input-group-text form-control" type="text" name="drop" placeholder="Drop"></div>      
                              </div>    
                      
            <input type="text" id="pickUpLatLng" style="display: none;" name="pickUpLatLng" class="input-group-text"  value= "">
            <input type="text" id="dropLatLng" style="display: none;" name="dropLatLng" class="input-group-text"  value= "">
            <input type="text" style="display: none;" name="driverId" class="input-group-text"  value= <%= reqDriver._id %>>
          
          
          
            <div id="infowindow-content">
                <span id="place-name" class="title"></span><br/>
                <span id="place-address"></span>
              </div>   
                  <div id="map"></div>
                  <div id="pac-container">
                
                </div>          
                <br>
   

                <input type="text" id="selectedEmp" value=<%= selectedEmp %> >
                <p> <%= selectedEmp %> </p>
                <button type="submit" class="btn btn-primary"> Create </button>    
        
                </form>
              </div>
            </div>
        </div>

<script>
     if (selectedEmp = undefined) { document.getElementById("selectedEmp").innerHTML = "";  }
console.log(reqDriver);

function initMap() {
  const map = new google.maps.Map(document.getElementById("map"), {
    center: { lat: 12.975766, lng: 77.570869 },
    zoom: 13,
    mapTypeControl: false,
  });
  const card = document.getElementById("pac-card");
  const input = document.getElementById("pac-input");
  const input1 = document.getElementById("pac-input1");
  const biasInputElement = document.getElementById("use-location-bias");
  const strictBoundsInputElement = document.getElementById("use-strict-bounds");
  const options = {
    fields: ["formatted_address", "geometry", "name"],
    strictBounds: false,
    types: ["establishment"],
  };

  map.controls[google.maps.ControlPosition.TOP_LEFT].push(card);

  const autocomplete = new google.maps.places.Autocomplete(input, options);
  const autocomplete1 = new google.maps.places.Autocomplete(input1, options);

  // Bind the map's bounds (viewport) property to the autocomplete object,
  // so that the autocomplete requests use the current map bounds for the
  // bounds option in the request.
  autocomplete.bindTo("bounds", map);
  autocomplete1.bindTo("bounds", map);


  const infowindow = new google.maps.InfoWindow();
  const infowindowContent = document.getElementById("infowindow-content");

  infowindow.setContent(infowindowContent);

  const marker = new google.maps.Marker({
    map,
    anchorPoint: new google.maps.Point(0, -29),
  });

  

  autocomplete.addListener("place_changed", () => {
    infowindow.close();
    marker.setVisible(false);

    const place = autocomplete.getPlace();

    if (!place.geometry || !place.geometry.location) {
      // User entered the name of a Place that was not suggested and
      // pressed the Enter key, or the Place Details request failed.
      window.alert("No details available for input: '" + place.name + "'");
      return;
    }

    // If the place has a geometry, then present it on a map.
    if (place.geometry.viewport) {
        console.log(place);
      map.fitBounds(place.geometry.viewport);
      const pLat = place.geometry.location.lat();
      const pLng = place.geometry.location.lng();
      const Pll = pLat + "," + pLng;
      document.getElementById("pickUpLatLng").value =  Pll  ;
      console.log(Pll);
   
    } else {
      map.setCenter(place.geometry.location);
      map.setZoom(17);
      
    }

    marker.setPosition(place.geometry.location);
    marker.setVisible(true);
    infowindowContent.children["place-name"].textContent = place.name;
    infowindowContent.children["place-address"].textContent =
    place.name;
    infowindow.open(map, marker);
  });

  autocomplete1.addListener("place_changed", () => {
    infowindow.close();
    marker.setVisible(false);

    const place = autocomplete1.getPlace();

    if (!place.geometry || !place.geometry.location) {
      // User entered the name of a Place that was not suggested and
      // pressed the Enter key, or the Place Details request failed.
      window.alert("No details available for input: '" + place.name + "'");
      return;
    }

    // If the place has a geometry, then present it on a map.
    if (place.geometry.viewport) {
        console.log(place);
      map.fitBounds(place.geometry.viewport);
      const dLat = place.geometry.location.lat();
      const dLng = place.geometry.location.lng();
      const Dll = dLat + "," + dLng;
      document.getElementById("dropLatLng").value =  Dll  ;
      console.log(Dll);
  
    } else {
      map.setCenter(place.geometry.location);

      map.setZoom(17);
    }

    marker.setPosition(place.geometry.location);
    marker.setVisible(true);
    infowindowContent.children["place-name"].textContent = place.name;
    infowindowContent.children["place-address"].textContent =
      place.formatted_address;
    infowindow.open(map, marker);
  });

  // Sets a listener on a radio button to change the filter type on Places
  // Autocomplete.
  function setupClickListener(id, types) {
    const radioButton = document.getElementById(id);

    radioButton.addEventListener("click", () => {
      autocomplete.setTypes(types);

    });
  }
  function setupClickListener(id, types) {
    const radioButton = document.getElementById(id);

    radioButton.addEventListener("click", () => {
      autocomplete.setTypes(types);
      input1.value = "";
    });
  }



  function setupClickListener(id, types) {
    const radioButton = document.getElementById(id);

    radioButton.addEventListener("click", () => {
      autocomplete1.setTypes(types);
      input.value = "";
  
    });
  }
  function setupClickListener(id, types) {
    const radioButton = document.getElementById(id);

    radioButton.addEventListener("click", () => {
      autocomplete1.setTypes(types);
      input1.value = "";
    });
  }


  setupClickListener("changetype-all", []);
  setupClickListener("changetype-address", ["address"]);
  setupClickListener("changetype-establishment", ["establishment"]);
  setupClickListener("changetype-geocode", ["geocode"]);
  setupClickListener("changetype-cities", ["(cities)"]);
  setupClickListener("changetype-regions", ["(regions)"]);
  biasInputElement.addEventListener("change", () => {
    if (biasInputElement.checked) {
      autocomplete.bindTo("bounds", map);
    } else {
      // User wants to turn off location bias, so three things need to happen:
      // 1. Unbind from map
      // 2. Reset the bounds to whole world
      // 3. Uncheck the strict bounds checkbox UI (which also disables strict bounds)
      autocomplete.unbind("bounds");
      autocomplete.setBounds({ east: 180, west: -180, north: 90, south: -90 });
      strictBoundsInputElement.checked = biasInputElement.checked;
    }

    input.value = "";

  });

    biasInputElement.addEventListener("change", () => {
    if (biasInputElement.checked) {
      autocomplete1.bindTo("bounds", map);
    } else {
      // User wants to turn off location bias, so three things need to happen:
      // 1. Unbind from map
      // 2. Reset the bounds to whole world
      // 3. Uncheck the strict bounds checkbox UI (which also disables strict bounds)
      autocomplete1.unbind("bounds");
      autocomplete1.setBounds({ east: 180, west: -180, north: 90, south: -90 });
      strictBoundsInputElement.checked = biasInputElement.checked;
    }

    input.value = "";
 
  });


  strictBoundsInputElement.addEventListener("change", () => {
    autocomplete.setOptions({
      strictBounds: strictBoundsInputElement.checked,
    });
    if (strictBoundsInputElement.checked) {
      biasInputElement.checked = strictBoundsInputElement.checked;
      autocomplete.bindTo("bounds", map);
    }

    input.value = "";

  });


  strictBoundsInputElement.addEventListener("change", () => {
    autocomplete1.setOptions({
      strictBounds: strictBoundsInputElement.checked,
    });
    if (strictBoundsInputElement.checked) {
      biasInputElement.checked = strictBoundsInputElement.checked;
      autocomplete1.bindTo("bounds", map);
    }

  
    input1.value = "";
  });
}

window.initMap = initMap;

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDSX3jhBJVmlod62B-joxdetnWt-_yBnLM&callback=initMap&libraries=places&v=weekly"></script>

        <%- include("partials/footer") -%>